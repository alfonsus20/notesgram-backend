// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email      String? @unique
  name       String?
  username   String? @unique
  password   String
  avatar_url String?
  coins      Int     @default(0)
  is_admin   Boolean @default(false)
  fcm_token  String?

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  posts                 Post[]
  followers             Follow[]                @relation("followers")
  followings            Follow[]                @relation("followings")
  liked_posts           PostLike[]              @relation("liked_posts")
  commented_posts       PostComment[]           @relation("commented_posts")
  TopupTransactions     TopupTransaction[]
  NotePurchases         NotePurchase[]
  bookmarked_posts      PostBookmark[]          @relation("bookmarked_posts")
  WithdrawalTransaction WithdrawalTransaction[]
  BookmarkedGroup       BookmarkedGroup[]
  PurchasedGroup        PurchasedGroup[]
  NotificationRead      NotificationRead[]
  notification_created  Notification[]          @relation("notification_created")
  notification_received Notification[]          @relation("notification_received")
  ChallengeClaim        ChallengeClaim[]

  @@map("users")
}

model Post {
  id      Int    @id @default(autoincrement())
  caption String

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  note         Note?
  likes        PostLike[]     @relation("likes")
  comments     PostComment[]  @relation("comments")
  bookmarks    PostBookmark[] @relation("bookmarks")
  Notification Notification[]

  @@map("posts")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  note_pictures         NotePicture[]
  post                  Post                    @relation(fields: [postId], references: [id])
  postId                Int                     @unique
  purchases             NotePurchase[]
  PurchasedGroupMember  PurchasedGroupMember[]
  BookmarkedGroupMember BookmarkedGroupMember[]
  Notification          Notification[]

  @@map("notes")
}

model NotePicture {
  id          Int      @id @default(autoincrement())
  picture_url String
  note        Note     @relation(fields: [noteId], references: [id])
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  noteId      Int

  @@map("note_pictures")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now()) @db.Timestamptz(3)

  follower  User @relation("followings", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])

  @@map("follows")
}

model PostLike {
  id      Int @id @default(autoincrement())
  likerId Int
  postId  Int

  liker User @relation("liked_posts", fields: [likerId], references: [id])
  post  Post @relation("likes", fields: [postId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("post_likes")
}

model PostComment {
  id          Int    @id @default(autoincrement())
  commenterId Int
  postId      Int
  comment     String

  commenter User @relation("commented_posts", fields: [commenterId], references: [id])
  post      Post @relation("comments", fields: [postId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("post_comments")
}

model TopupTransaction {
  id             String  @id @default(uuid())
  userId         Int
  amount         Int
  payment_method String?
  status         String
  admin_fee      Int

  user User @relation(fields: [userId], references: [id])

  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(3)
  Notification Notification[]

  @@map("topup_transactions")
}

model NotePurchase {
  id     Int @id @default(autoincrement())
  userId Int
  noteId Int
  price  Int

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@map("note_purchases")
}

model PromoCode {
  id       Int      @id @default(autoincrement())
  code     String   @unique
  discount Int
  endAt    DateTime @db.Timestamptz(3)

  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamptz(3)
  Notification Notification[]

  @@map("promo_codes")
}

model PostBookmark {
  id           Int @id @default(autoincrement())
  bookmarkerId Int
  postId       Int

  bookmarker User @relation("bookmarked_posts", fields: [bookmarkerId], references: [id])
  post       Post @relation("bookmarks", fields: [postId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("post_bookmarks")
}

model WithdrawalTransaction {
  id             String @id @default(uuid())
  userId         Int
  amount         Int
  bank_code      String
  account_number Int
  status         String
  admin_fee      Int

  user User @relation(fields: [userId], references: [id])

  createdAt    DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime       @updatedAt @db.Timestamptz(3)
  Notification Notification[]

  @@map("withdrawal_transactions")
}

model BookmarkedGroup {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int

  user      User                    @relation(fields: [userId], references: [id])
  createdAt DateTime                @default(now()) @db.Timestamptz(3)
  updatedAt DateTime                @updatedAt @db.Timestamptz(3)
  notes     BookmarkedGroupMember[]

  @@map("note_bookmarked_groups")
}

model BookmarkedGroupMember {
  id      Int @id @default(autoincrement())
  noteId  Int
  groupId Int

  group BookmarkedGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  note  Note            @relation(fields: [noteId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@map("note_bookmarked_group_members")
}

model PurchasedGroup {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int

  user      User                   @relation(fields: [userId], references: [id])
  createdAt DateTime               @default(now()) @db.Timestamptz(3)
  updatedAt DateTime               @updatedAt @db.Timestamptz(3)
  notes     PurchasedGroupMember[]

  @@map("note_purchased_groups")
}

model PurchasedGroupMember {
  id      Int @id @default(autoincrement())
  noteId  Int
  groupId Int

  group PurchasedGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  note  Note           @relation(fields: [noteId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)

  @@map("note_purchased_group_members")
}

model Notification {
  id           Int     @id @default(autoincrement())
  title        String
  body         String
  creatorId    Int?
  receiverId   Int?
  postId       Int?
  noteId       Int?
  topupId      String?
  withdrawalId String?
  promoId      Int?

  category NotificationCategory

  creator    User?                  @relation(name: "notification_created", fields: [creatorId], references: [id])
  receiver   User?                  @relation(name: "notification_received", fields: [receiverId], references: [id])
  note       Note?                  @relation(fields: [noteId], references: [id])
  post       Post?                  @relation(fields: [postId], references: [id])
  topup      TopupTransaction?      @relation(fields: [topupId], references: [id])
  withdrawal WithdrawalTransaction? @relation(fields: [withdrawalId], references: [id])
  promo      PromoCode?             @relation(fields: [promoId], references: [id])

  createdAt        DateTime           @default(now()) @db.Timestamptz(3)
  NotificationRead NotificationRead[]

  @@map("notifications")
}

enum NotificationCategory {
  INFO
  PROMO
  FOLLOW
  TOPUP
  WITHDRAWAL
  COMMENT
  LIKE
  LOGIN
}

model NotificationRead {
  id             Int @id @default(autoincrement())
  notificationId Int
  userId         Int

  user         User         @relation(fields: [userId], references: [id])
  notification Notification @relation(fields: [notificationId], references: [id])

  @@map("notification_read")
}

model Challenge {
  id          Int               @id @default(autoincrement())
  period      ChallengePeriod
  category    ChallengeCategory
  title       String
  description String
  endAt       DateTime          @db.Timestamptz(3)
  count       Int
  reward      Int

  createdAt      DateTime         @default(now()) @db.Timestamptz(3)
  ChallengeClaim ChallengeClaim[]

  @@map("challenges")
}

model ChallengeClaim {
  id          Int @id @default(autoincrement())
  userId      Int
  challengeId Int

  user      User      @relation(fields: [userId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("challenge_claim")
}

enum ChallengePeriod {
  DAILY
  WEEKLY
  MONTHLY
}

enum ChallengeCategory {
  COMMENT_GIVEN
  LIKE_GIVEN
  COMMENT_GAINED
  LIKE_GAINED
  NOTE_SALE
  NOTE_PURCHASE
}
