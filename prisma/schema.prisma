// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email      String  @unique
  password   String?
  name       String
  username   String? @unique
  google_id  String? @unique
  avatar_url String?
  coins      Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts             Post[]
  followers         Follow[]           @relation("followers")
  followings        Follow[]           @relation("followings")
  liked_posts       PostLike[]         @relation("liked_posts")
  commented_posts   PostComment[]      @relation("commented_posts")
  TopupTransactions TopupTransaction[]
  NotePurchases     NotePurchase[]

  @@map("users")
}

model Post {
  id      Int    @id @default(autoincrement())
  caption String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  note       Note?
  likers     PostLike[]    @relation("likers")
  commenters PostComment[] @relation("commenters")

  @@map("posts")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note_pictures NotePicture[]
  post          Post            @relation(fields: [postId], references: [id])
  postId        Int             @unique
  purchases     NotePurchase[]

  @@map("notes")
}

model NotePicture {
  id          Int      @id @default(autoincrement())
  picture_url String
  note        Note     @relation(fields: [noteId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  noteId      Int

  @@map("note_pictures")
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("followings", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])

  @@map("follows")
}

model PostLike {
  id      Int @id @default(autoincrement())
  likerId Int
  postId  Int

  liker User @relation("liked_posts", fields: [likerId], references: [id])
  post  Post @relation("likers", fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@map("post_likes")
}

model PostComment {
  id          Int    @id @default(autoincrement())
  commenterId Int
  postId      Int
  comment     String

  commenter User @relation("commented_posts", fields: [commenterId], references: [id])
  post      Post @relation("commenters", fields: [postId], references: [id])

  createdAt DateTime @default(now())

  @@map("post_comments")
}

model TopupTransaction {
  id             String  @id @default(uuid())
  userId         Int
  amount         Int
  payment_method String?
  status         String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("topup_transactions")
}

model NotePurchase {
  id     Int @id @default(autoincrement())
  userId Int
  noteId Int

  user User @relation(fields: [userId], references: [id])
  note Note @relation(fields: [noteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("note_purchases")
}

model PromoCode {
  id       Int      @id @default(autoincrement())
  code     String
  discount Int
  endAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promo_codes")
}
